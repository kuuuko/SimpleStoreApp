@{
    ViewBag.Title = "Index";
}

@(Html.Kendo().Grid<SimpleStoreApp.Models.CategoryViewModel>()
    .Name("categoryGrid")
    .Columns(columns =>
    {
        columns.Bound(item => item.viewCategoryName).Width(100);
        columns.Bound(item => item.viewCategoryValidFrom).Width(100);
        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(100);
    })
    .ToolBar(toolbar => toolbar.Create().Text("Add new Category"))
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .Sortable()
    .Pageable()
    .Scrollable()
    .ClientDetailTemplateId("productTemplate")
    .HtmlAttributes(new { style = "height:600px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(5)
        .Model(model => model.Id(c => c.viewCategoryId))
        .Create(update => update.Action("CreateCategory", "Store"))
        .Read(read => read.Action("Categories", "Store"))
        .Update(update => update.Action("UpdateCategory", "Store"))
        .Destroy(update => update.Action("DestroyCategory", "Store"))
    )
    .Events(events => events.DataBound("dataBound"))
)

<script id="productTemplate" type="text/kendo-tmpl">                              
    @(Html.Kendo().Grid<SimpleStoreApp.Models.ProductViewModel>()
    .Name("productGrid_#=viewCategoryId#")
    .Columns(columns =>
    {
        columns.Bound(product => product.viewProductName).Width(100);
        columns.Bound(product => product.viewProductPrice).Width(100);
        columns.Bound(product => product.viewProductQuantity).Width(100);
        columns.Bound(product => product.viewProductValidFrom).Width(100);
        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(100);
    })
    .ToolBar(toolbar => toolbar.Create().Text("Add new Product"))
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .Sortable()
    .Pageable()
    .DataSource(dataSorurce => dataSorurce
        .Ajax()
        .PageSize(5)
        .Model(model => model.Id(c => c.viewProductId))
        .Create(update => update.Action("CreateProduct", "Store", new { productCategoryId = "#=viewCategoryId#" }))
        .Update(update => update.Action("UpdateProduct", "Store"))
        .Destroy(update => update.Action("DestroyProduct", "Store"))
        .Read(read => read.Action("Products", "Store", new { productCategoryId = "#=viewCategoryId#" }))
        )
    .ToClientTemplate()
    )          
</script>
<script>
    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first())
    }
</script>